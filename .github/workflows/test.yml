# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Check if files changed
      run: |
        URL="https://api.github.com/repos/candy02058912/toastmasters/pulls/${{ github.event.pull_request.number }}/files"
        FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
        echo $FILES
        if [ $(echo $FILES | grep -c -E "test.yml|push_record.sh") = 1 ]; then
          echo -e "Detected changes to test.yml or push_record.sh"
          exit 1
        fi

    - name: Deploy swarm
      run: |
        chmod +x ./scripts/deploy_swarm.sh
        ./scripts/deploy_swarm.sh
    
    - name: Set replica
      run: |
        chmod +x ./scripts/scale_swarm.sh
        ./scripts/scale_swarm.sh $(awk '{if (NR != 0) {print "-s " $1 " -r " $2 }}' scale.conf)

    - name: Test deployment
      id: test
      run: |
        name=$(docker ps -aqf "name=demo_tester")
        result=$(docker exec $name ab -n 100 -c 100 -S -q -w 'nginx/h1?a=1&b=3' | tail -n +9)
        score=$(echo "$result" | grep 'Time taken for tests:' | sed -e 's/<[^>]*>//g' | sed -e 's/[A-Za-z: ]//g')
        penalty=$(echo "$result" | grep 'Failed requests:' | sed -e 's/<[^>]*>//g' | sed -e 's/[A-Za-z: ]//g')
        total=$((score+penalty))
        result="${result//$'\n'/}"
        echo $total
        echo "::set-output name=result::$result"
        echo "::set-output name=score::$total"

    - name: Push to AirTable
      run: |
        name=$(docker ps -aqf "name=demo_tester")
        docker exec $name sh /push_record.sh ${{ github.actor }} ${{steps.test.outputs.score}} ${{ secrets.AIRTABLE_API_KEY }}
    - name: Comment result to PR
      uses: unsplash/comment-on-pr@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: "${{steps.test.outputs.result}}"
        check_for_duplicate_msg: false  # OPTIONAL 